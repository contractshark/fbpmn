#!/bin/sh

# For each configuration Config/Prop*cfg (property to check) and each
# network Config/Network*, run tlc and analyse the results.

# runtlc="java -classpath /opt/tla --add-modules java.activation tlc2.TLC -deadlock"
runtlc="java -classpath $TLA2TOOLS_HOME/tla2tools.jar tlc2.TLC -deadlock"

################

parse_stat()
{
  transitions=`expr "$1" : '\([0-9]*\) states generated'`
  states=`expr "$1" : '.*, \([0-9]*\) distinct states found'`
  depth=`expr "$2" : 'The depth of the complete state graph search is \([0-9]*\)'`
  echo "states=$states trans=$transitions depth=$depth"
}

################

if [ $# -ne 1 ]; then
  echo $0 '<model>'
  exit 1
fi

if [ -z $FBPMN_HOME ]; then
        echo FBPMN_HOME is not set; exit 1
fi
if [ ! -d $FBPMN_HOME/theories/tla ]; then
        echo "wrong FBPMN_HOME (theories/tla not found)"; exit 1
fi
if [ -z $TLA2TOOLS_HOME ]; then
        echo TLA2TOOLS_HOME is no set; exit 1
fi
if [ ! -f $TLA2TOOLS_HOME/tla2tools.jar ]; then
        echo "wrong TLA2TOOLS_HOME (tla2tools.jar not found)"; exit 1
fi

fullpath="${1%.bpmn}"  # just strip extension if necessary
model=`basename $fullpath`
dir=`mktemp -d /tmp/$model.XXXXX`

if [ ! -f $fullpath.bpmn ]; then
    echo "$fullpath.bpmn not found."
    exit 1
fi

echo "Working in $dir..."

# Transform the BPMN model into TLA
cp $fullpath.bpmn $dir
(cd $dir; fbpmn bpmn2tla $model $model)

if [ ! -f $dir/$model.tla ]; then
    echo "model transformation failed"
    exit 1
fi

# Copy verification files
cp $FBPMN_HOME/theories/tla/PWS*.tla $FBPMN_HOME/theories/tla/Network*.tla $dir
cp -f $FBPMN_HOME/theories/tla/StatsBPMN.cfg $FBPMN_HOME/theories/tla/StatsBPMN.tla .
cp -rf $FBPMN_HOME/theories/tla/Configs .

# First, use StatsBPMN to print some information on the size of the BPMN model.
cp StatsBPMN.cfg $dir
sed -e "s/INSTANCE.*$/INSTANCE $model/g" StatsBPMN.tla >$dir/StatsBPMN.tla
(cd $dir; $runtlc StatsBPMN |grep 'Processes=')
(cd $dir; rm -rf states)

# For each configuration Config/*cfg (property to check) and each network Config/Network,
# build the files Network.tla and model.cfg
for network in Configs/Network*.tla; do
    networkname=`basename $network .tla`
    cp $network $dir/Network.tla
    for cfg in Configs/Prop*.cfg; do
        cfgname=`basename $cfg .cfg`
        log=$networkname.$cfgname.log
        echo -n "  Checking $networkname.$cfgname... "
        cp $cfg $dir/$model.cfg
        if [ -f $fullpath.constraint ]; then cat $fullpath.constraint >> $dir/$model.cfg; fi
        (cd $dir; $runtlc $model > $log)
        (cd $dir; rm -rf states)
        if `grep -q "Error: Assumption.*is false" $dir/$log`; then
            echo "PANIC: bad model (assume failed)"
        else
            if `grep -q "No error has been found" $dir/$log`; then
                echo -n "OK: "
            else
               echo -n "FAILED: "
            fi
            stat1=`grep "^[0-9]* states generated.*0 states left on queue" $dir/$log`
            stat2=`grep "The depth of the complete state graph" $dir/$log`
            parse_stat "$stat1" "$stat2"
        fi
    done
done

echo "done."

